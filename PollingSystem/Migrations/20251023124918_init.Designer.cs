// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PollingSystem.Infrastructure;

#nullable disable

namespace PollingSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251023124918_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PollingSystem.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            Text = "Excellent"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 1,
                            Text = "Good"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 1,
                            Text = "Average"
                        },
                        new
                        {
                            Id = 4,
                            QuestionId = 1,
                            Text = "Poor"
                        },
                        new
                        {
                            Id = 5,
                            QuestionId = 2,
                            Text = "Very well packaged"
                        },
                        new
                        {
                            Id = 6,
                            QuestionId = 2,
                            Text = "Good"
                        },
                        new
                        {
                            Id = 7,
                            QuestionId = 2,
                            Text = "Could be better"
                        },
                        new
                        {
                            Id = 8,
                            QuestionId = 2,
                            Text = "Poor"
                        },
                        new
                        {
                            Id = 9,
                            QuestionId = 3,
                            Text = "Excellent"
                        },
                        new
                        {
                            Id = 10,
                            QuestionId = 3,
                            Text = "Good"
                        },
                        new
                        {
                            Id = 11,
                            QuestionId = 3,
                            Text = "Average"
                        },
                        new
                        {
                            Id = 12,
                            QuestionId = 3,
                            Text = "Poor"
                        },
                        new
                        {
                            Id = 13,
                            QuestionId = 4,
                            Text = "Very friendly and respectful"
                        },
                        new
                        {
                            Id = 14,
                            QuestionId = 4,
                            Text = "Good"
                        },
                        new
                        {
                            Id = 15,
                            QuestionId = 4,
                            Text = "Acceptable"
                        },
                        new
                        {
                            Id = 16,
                            QuestionId = 4,
                            Text = "Unfriendly"
                        },
                        new
                        {
                            Id = 17,
                            QuestionId = 5,
                            Text = "Completely satisfied"
                        },
                        new
                        {
                            Id = 18,
                            QuestionId = 5,
                            Text = "Somewhat satisfied"
                        },
                        new
                        {
                            Id = 19,
                            QuestionId = 5,
                            Text = "Dissatisfied"
                        },
                        new
                        {
                            Id = 20,
                            QuestionId = 5,
                            Text = "Completely dissatisfied"
                        });
                });

            modelBuilder.Entity("PollingSystem.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SurveyId = 1,
                            Text = "How would you rate the overall quality of our products?"
                        },
                        new
                        {
                            Id = 2,
                            SurveyId = 1,
                            Text = "How satisfied are you with the packaging quality?"
                        },
                        new
                        {
                            Id = 3,
                            SurveyId = 2,
                            Text = "How would you rate Professor X's knowledge of the subject?"
                        },
                        new
                        {
                            Id = 4,
                            SurveyId = 2,
                            Text = "How well does Professor X interact with students?"
                        },
                        new
                        {
                            Id = 5,
                            SurveyId = 2,
                            Text = "Overall, how satisfied are you with Professor X's classes?"
                        });
                });

            modelBuilder.Entity("PollingSystem.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminId = 1,
                            Title = "Product Quality Evaluation"
                        },
                        new
                        {
                            Id = 2,
                            AdminId = 2,
                            Title = "Professor X Course Feedback"
                        });
                });

            modelBuilder.Entity("PollingSystem.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PollingSystem.Entities.UserSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId", "SurveyId")
                        .IsUnique();

                    b.ToTable("usersurveys");
                });

            modelBuilder.Entity("PollingSystem.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NormalUserId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalUserId");

                    b.HasIndex("OptionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("votes");
                });

            modelBuilder.Entity("PollingSystem.Entities.Admin", b =>
                {
                    b.HasBaseType("PollingSystem.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "John Smith",
                            Password = "1234",
                            Username = "admin1"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Sarah Johnson",
                            Password = "1234",
                            Username = "admin2"
                        });
                });

            modelBuilder.Entity("PollingSystem.Entities.NormalUser", b =>
                {
                    b.HasBaseType("PollingSystem.Entities.User");

                    b.HasDiscriminator().HasValue("NormalUser");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            FullName = "Michael Brown",
                            Password = "1234",
                            Username = "user1"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Emily Davis",
                            Password = "1234",
                            Username = "user2"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "David Wilson",
                            Password = "1234",
                            Username = "user3"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Sophia Miller",
                            Password = "1234",
                            Username = "user4"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "James Anderson",
                            Password = "1234",
                            Username = "user5"
                        });
                });

            modelBuilder.Entity("PollingSystem.Entities.Option", b =>
                {
                    b.HasOne("PollingSystem.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PollingSystem.Entities.Question", b =>
                {
                    b.HasOne("PollingSystem.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PollingSystem.Entities.Survey", b =>
                {
                    b.HasOne("PollingSystem.Entities.Admin", "Admin")
                        .WithMany("Surveys")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("PollingSystem.Entities.UserSurvey", b =>
                {
                    b.HasOne("PollingSystem.Entities.Survey", "Survey")
                        .WithMany("UserSurveys")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PollingSystem.Entities.NormalUser", "User")
                        .WithMany("StatusSurveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PollingSystem.Entities.Vote", b =>
                {
                    b.HasOne("PollingSystem.Entities.NormalUser", "NormalUser")
                        .WithMany("Votes")
                        .HasForeignKey("NormalUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PollingSystem.Entities.Option", "Option")
                        .WithMany("Votes")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PollingSystem.Entities.Survey", "Survey")
                        .WithMany("Votes")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NormalUser");

                    b.Navigation("Option");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PollingSystem.Entities.Option", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("PollingSystem.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("PollingSystem.Entities.Survey", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserSurveys");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("PollingSystem.Entities.Admin", b =>
                {
                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("PollingSystem.Entities.NormalUser", b =>
                {
                    b.Navigation("StatusSurveys");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
